{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Plugin } from 'vite'\nimport { RouteRecord, RouteRecordRaw } from 'vue-router'\nimport { writeFile } from 'fs'\nimport { GlobalRegistrator } from '@happy-dom/global-registrator'\n\ntype RouteInput = Pick<RouteRecordRaw, 'path' | 'children'>\n\n/**\n * Plugin options for the sitemap plugin.\n */\ninterface PluginOptions {\n  /**\n   * The path to the router file.\n   */\n  routerFile?: string\n  /**\n   * The array of route records. This takes precedence over the router file.\n   */\n  routes?: Array<RouteRecord>\n  /**\n   * A function to filter routes.\n   * @param route - The route to be filtered.\n   * @returns Whether the route should be included or not.\n   */\n  filter?: (route?: RouteInput) => boolean\n  /**\n   * The URL of the application.\n   */\n  appUrl?: string\n  /**\n   * The path of the output file.\n   * @default (build.outDir || 'dist/') + 'sitemap.xml'\n   */\n  outfile?: string\n}\n\nexport const sitemapPlugin = ({\n  routerFile,\n  routes,\n  outfile,\n  filter,\n  appUrl\n}: PluginOptions): Plugin => ({\n  name: 'vite-sitemap-router',\n  apply: 'build',\n  writeBundle: async function (outputOptions, bundle) {\n    // Mocking window object in Node.js\n    if (!global.window) {\n      GlobalRegistrator.register()\n    }\n\n    let resolvedRoutes: Array<RouteInput> = []\n\n    const wd = process.cwd()\n    if (!routerFile?.startsWith(wd)) {\n      routerFile = `${wd}/${routerFile}`\n    }\n\n    const outDir = `${outputOptions.dir || 'dist'}/`\n    const filePath = outfile || outDir + 'sitemap.xml'\n    let routerFileData\n\n    try {\n      if (routes) {\n        resolvedRoutes = routes\n      } else if (routerFile) {\n        try {\n          for (const [fileName, chunkInfo] of Object.entries(bundle)) {\n            if (chunkInfo.type === 'chunk') {\n              const targetModule = chunkInfo.modules[routerFile]\n              if (targetModule) {\n                this.debug({\n                  message: 'Found router file in chunk ' + outDir + fileName\n                })\n\n                const out = await import(outDir + fileName)\n\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                for (const value of Object.values<any>(out)) {\n                  if (value?.getRoutes && value?.install) {\n                    routerFileData = value\n                    break\n                  }\n                }\n                break\n              }\n            }\n          }\n\n          this.debug({\n            message: `Loading router file: ${routerFile}`\n          })\n\n          if (routerFileData) {\n            resolvedRoutes = routerFileData.getRoutes()\n          } else {\n            throw new Error(\n              'No data found in router file; is it exported correctly?'\n            )\n          }\n        } catch (error) {\n          this.error({ message: 'Error loading router file: ' + error })\n        }\n      }\n\n      const getRoutesList = (\n        routes: Readonly<Array<RouteInput>>,\n        host?: string,\n        filter?: PluginOptions['filter']\n      ) => {\n        return Array.from(\n          new Set(\n            routes.reduce<Array<string>>((dest, route) => {\n              if (filter && !filter(route)) {\n                return dest\n              }\n\n              if (!host && route.path.trim() === '') return dest\n\n              let path = `${host || ''}${route.path}`\n\n              if (route.path !== '*' && route.path !== '/:catchAll(.*)') {\n                if (path.endsWith('/')) {\n                  path = path.slice(0, -1)\n                }\n                dest.push(path)\n              }\n\n              if (route.children) {\n                dest.push(...getRoutesList(route.children, `${path}/`))\n              }\n\n              return dest\n            }, [])\n          )\n        ).sort((a, b) => a.localeCompare(b))\n      }\n\n      const getRoutesXML = () => {\n        const list = getRoutesList(resolvedRoutes, appUrl, filter)\n          .map(\n            (route) => `\n  <url>\n    <loc>${route}</loc>\n  </url>`\n          )\n          .join('\\r\\n')\n        return `<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n  ${list}\n  </urlset>`\n      }\n\n      const xmlOutput = getRoutesXML()\n\n      writeFile(filePath, xmlOutput, (err) => {\n        if (err) {\n          this.error({ message: 'Error writing sitemap file:' + err })\n        }\n      })\n    } catch (error) {\n      this.error({ message: 'Error generating sitemap: ' + error })\n    } finally {\n      await GlobalRegistrator.unregister()\n    }\n  }\n})\n"],"mappings":"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","names":["routes","filter"]}